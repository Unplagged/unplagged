<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Application_Model_CaseProxy extends \Application_Model_Case implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function created()
    {
        $this->__load();
        return parent::created();
    }

    public function updated()
    {
        $this->__load();
        return parent::updated();
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function getAlias()
    {
        $this->__load();
        return parent::getAlias();
    }

    public function getState()
    {
        $this->__load();
        return parent::getState();
    }

    public function getUpdated()
    {
        $this->__load();
        return parent::getUpdated();
    }

    public function getCreated()
    {
        $this->__load();
        return parent::getCreated();
    }

    public function addTag(\Application_Model_Tag $tag)
    {
        $this->__load();
        return parent::addTag($tag);
    }

    public function removeTag(\Application_Model_Tag $tag)
    {
        $this->__load();
        return parent::removeTag($tag);
    }

    public function getTags()
    {
        $this->__load();
        return parent::getTags();
    }

    public function clearTags()
    {
        $this->__load();
        return parent::clearTags();
    }

    public function addCollaborator(\Application_Model_User $user)
    {
        $this->__load();
        return parent::addCollaborator($user);
    }

    public function removeCollaborator(\Application_Model_User $user)
    {
        $this->__load();
        return parent::removeCollaborator($user);
    }

    public function getCollaborators()
    {
        $this->__load();
        return parent::getCollaborators();
    }

    public function clearCollaborators()
    {
        $this->__load();
        return parent::clearCollaborators();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'alias', 'created', 'updated', 'documents', 'files', 'tags', 'collaborators');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}