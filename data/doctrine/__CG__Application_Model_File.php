<?php

namespace Proxies\__CG__;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Application_Model_File extends \Application_Model_File implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function updated()
    {
        $this->__load();
        return parent::updated();
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getCreated()
    {
        $this->__load();
        return parent::getCreated();
    }

    public function getUpdated()
    {
        $this->__load();
        return parent::getUpdated();
    }

    public function getFilename()
    {
        $this->__load();
        return parent::getFilename();
    }

    public function getMimetype()
    {
        $this->__load();
        return parent::getMimetype();
    }

    public function getSize()
    {
        $this->__load();
        return parent::getSize();
    }

    public function getExtension()
    {
        $this->__load();
        return parent::getExtension();
    }

    public function getLocation()
    {
        $this->__load();
        return parent::getLocation();
    }

    public function getAbsoluteLocation()
    {
        $this->__load();
        return parent::getAbsoluteLocation();
    }

    public function setLocation($location)
    {
        $this->__load();
        return parent::setLocation($location);
    }

    public function setExtension($extension)
    {
        $this->__load();
        return parent::setExtension($extension);
    }

    public function isImage()
    {
        $this->__load();
        return parent::isImage();
    }

    public function getDirectName()
    {
        $this->__load();
        return parent::getDirectName();
    }

    public function getDirectLink()
    {
        $this->__load();
        return parent::getDirectLink();
    }

    public function toArray()
    {
        $this->__load();
        return parent::toArray();
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function created()
    {
        $this->__load();
        return parent::created();
    }

    public function getIconClass()
    {
        $this->__load();
        return parent::getIconClass();
    }

    public function getComments()
    {
        $this->__load();
        return parent::getComments();
    }

    public function getRatings()
    {
        $this->__load();
        return parent::getRatings();
    }

<<<<<<< HEAD
    public function geTags()
    {
        $this->__load();
        return parent::geTags();
=======
    public function getTags()
    {
        $this->__load();
        return parent::getTags();
>>>>>>> tien
    }

    public function getConversationTypes()
    {
        $this->__load();
        return parent::getConversationTypes();
    }

    public function isRatedByUser($user)
    {
        $this->__load();
        return parent::isRatedByUser($user);
    }

<<<<<<< HEAD
    public function getTags()
    {
        $this->__load();
        return parent::getTags();
=======
    public function geTags()
    {
        $this->__load();
        return parent::geTags();
>>>>>>> tien
    }

    public function getTagIds()
    {
        $this->__load();
        return parent::getTagIds();
    }

    public function addTag(\Application_Model_Tag $tag)
    {
        $this->__load();
        return parent::addTag($tag);
    }

    public function removeTag(\Application_Model_Tag $tag)
    {
        $this->__load();
        return parent::removeTag($tag);
    }

    public function setTags($tagIds = array (
))
    {
        $this->__load();
        return parent::setTags($tagIds);
    }

    public function clearTags()
    {
        $this->__load();
        return parent::clearTags();
    }


    public function __sleep()
    {
<<<<<<< HEAD
        return array('__isInitialized__', 'id', 'created', 'comments', 'tags', 'ratings', 'notifications', 'updated', 'filename', 'mimetype', 'size', 'location', 'extension', 'description');
=======
        return array('__isInitialized__', 'id', 'created', 'comments', 'tags', 'ratings', 'notifications', 'updated', 'filename', 'mimetype', 'size', 'location', 'extension', 'isTarget', 'description');
>>>>>>> tien
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}